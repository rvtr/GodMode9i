name: Build GodMode9i (NAND edit)

on:
  push:
    branches: ["*"]
    paths-ignore:
      - 'README.md'
  pull_request:
    branches: ["*"]
    paths-ignore:
      - 'README.md'
  release:
    types: [created]

jobs:
  build:
    runs-on: ubuntu-latest
    container: devkitpro/devkitarm:20241104
    name: Build with Docker using devkitARM
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
      - name: Install tools
        run: |
          sudo apt-get update
          sudo apt-get install p7zip-full -y
      - name: Setup environment
        run: git config --global safe.directory '*'
      - name: Build GodMode9i
        id: build
        run: |
          make all dsi
          chmod +x make_cia
          ./make_cia --srl="GodMode9i.dsi" --id_0=$(git rev-parse --short=7 HEAD) --tikID=$(git rev-parse --short=16 HEAD)
      - name: Publish unsigned build to GH Actions
        uses: actions/upload-artifact@v4.3.6
        with:
          path: "GodMode9i.dsi"
          name: GodMode9i-Nightly-Unsigned
      - name: Publish unsigned build to GH Actions
        uses: actions/upload-artifact@v4.3.6
        with:
          path: "GodMode9i-sys.dsi"
          name: GodMode9i-Nightly-Unsigned_sys
      - name: Publish CTR build to GH Actions
        uses: actions/upload-artifact@v4.3.6
        with:
          path: "GodMode9i.cia"
          name: GodMode9i-Nightly-3DS

  devsign:
    runs-on: windows-latest
    needs: [build]
    name: Devsign GodMode9i and build a TAD
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: GodMode9i-Nightly-Unsigned
          path: D:\a\GodMode9i\GodMode9i\GodMode9i-Build
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: GodMode9i-Nightly-Unsigned_sys
          path: D:\a\GodMode9i\GodMode9i\GodMode9i-Build_sys
      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - name: Clone ntool
        uses: GuillaumeFalourd/clone-github-repo-action@v2.1
        with:
          depth: 1
          owner: 'xprism1'
          repository: 'ntool'
      - name: Devsign GodMode9i
        run: |
          cp GodMode9i-Build\GodMode9i.dsi ntool
          cp GodMode9i-Build_sys\GodMode9i-sys.dsi ntool
          cd ntool
          pip install pycryptodome
          python ntool.py srl_retail2dev GodMode9i.dsi
          python ntool.py srl_retail2dev GodMode9i-sys.dsi
      - name: Publish devsigned build to GH Actions
        uses: actions/upload-artifact@v4.3.6
        with:
          path: "ntool/GodMode9i_dev.srl"
          name: GodMode9i-Nightly-Devsigned
      - name: Publish devsigned build to GH Actions
        uses: actions/upload-artifact@v4.3.6
        with:
          path: "ntool/GodMode9i-sys_dev.srl"
          name: GodMode9i-Nightly-Devsigned_sys
      - name: Make a devsigned TAD
        run: |
          curl https://cdn.randommeaninglesscharacters.com/tools/maketad/maketad.zip -o maketad.zip
          7z e maketad.zip
          cp ntool/GodMode9i_dev.srl .
          cp ntool/GodMode9i-sys_dev.srl .
          .\maketad-20090604.exe GodMode9i-sys_dev.srl -s -o GodMode9i-Nightly-sys.tad
          .\maketad-20090604.exe GodMode9i_dev.srl -o GodMode9i-Nightly.tad
      - name: Publish devsigned TAD to GH Actions
        uses: actions/upload-artifact@v4.3.6
        with:
          path: "GodMode9i-Nightly.tad"
          name: GodMode9i-Nightly-TAD
      - name: Publish devsigned TAD to GH Actions
        uses: actions/upload-artifact@v4.3.6
        with:
          path: "GodMode9i-Nightly-sys.tad"
          name: GodMode9i-Nightly-TAD_sys

  # Only run this for non-PR jobs.
  publish_build:
    runs-on: ubuntu-latest
    name: Upload to release
    if: ${{ success() && startsWith(github.ref, 'refs/tags') }}
    needs: build
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: build
          path: build
      - name: Publish Build
        run: |
          ID=$(jq --raw-output '.release.id' $GITHUB_EVENT_PATH)

          for file in ${{ github.workspace }}/build/*; do
            AUTH_HEADER="Authorization: token ${{ secrets.GITHUB_TOKEN }}"
            CONTENT_LENGTH="Content-Length: $(stat -c%s $file)"
            CONTENT_TYPE="Content-Type: application/7z-x-compressed"
            UPLOAD_URL="https://uploads.github.com/repos/${{ github.repository }}/releases/$ID/assets?name=$(basename $file)"

            curl -XPOST -H "$AUTH_HEADER" -H "$CONTENT_LENGTH" -H "$CONTENT_TYPE" --upload-file "$file" "$UPLOAD_URL"
          done
